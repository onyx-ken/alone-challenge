spring:
  application:
    name: challenge-service
  profiles:
    group:
      local: local
      dev: dev, common
      prod: prod, common
      test: local
  flyway:
    baseline-on-migrate: true
    baseline-version: 0
  jpa:
    hibernate:
      ddl-auto: validate
  messages:
    basename: errors
  servlet:
    multipart:
      max-file-size: 20MB
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: comment-auto
      auto-offset-reset: latest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
storage:
  path:
    challenge: upload/files/challenge/
---

spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:h2:file:./build/data/challenge;MODE=PostgreSQL;AUTO_SERVER=TRUE;DEFAULT_NULL_ORDERING=HIGH
    username: sa
    password:
    driverClassName: org.h2.Driver
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        use_sql_comments: true
  h2:
    console:
      enabled: true
      path: /h2-console
  cloud:
    config:
      enabled: false
    bus:
      enabled: false
eureka:
  client:
    enabled: false
server:
  port: 8002
management:
  endpoints:
    web:
      exposure:
        include: none
  health:
    defaults:
      enabled: false
image:
  base-url: http://localhost:8002/challenge-images/
endpoint:
  front: http://localhost:5173
---

spring:
  config:
    activate:
      on-profile: common
server:
  port: 0
eureka:
  instance:
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.value}}
    prefer-ip-address: true
management:
  endpoints:
    web:
      exposure:
        include: info, health, busrefresh

---

spring:
  config:
    activate:
      on-profile: dev
  cloud:
    config:
      uri: http://127.0.0.1:8888
      name: user
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

---

spring:
  config:
    activate:
      on-profile: prod
  cloud:
    config:
      uri: http://config-server:8888
      name: user
  rabbitmq:
    host: rabbitmq-server
    port: 5672
    username: prod_user
    password: prod_password
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

---

spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;MODE=PostgreSQL;
    username: sa
    password:
    driverClassName: org.h2.Driver

  kafka:
    bootstrap-servers: ${spring.embedded.kafka.brokers}
    consumer:
      group-id: testGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer